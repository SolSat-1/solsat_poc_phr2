name: Code Quality & Tests

on:
  push:
    branches: [ main, api ]
  pull_request:
    branches: [ main, api ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Check code formatting with Black
      run: |
        python scripts/formatting/format_code.py --tool black --check

    - name: Check import sorting with isort
      run: |
        python scripts/formatting/format_code.py --tool isort --check

    - name: Lint with flake8
      run: |
        python scripts/formatting/format_code.py --tool flake8

    - name: Analyze with pylint
      run: |
        python scripts/formatting/format_code.py --tool pylint
      continue-on-error: true  # Pylint warnings shouldn't fail CI

    - name: Type check with mypy
      run: |
        python scripts/formatting/format_code.py --tool mypy
      continue-on-error: true  # MyPy errors shouldn't fail CI

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short

    - name: Generate pylint report
      run: |
        python scripts/formatting/format_code.py --report

    - name: Upload pylint report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pylint-report-${{ matrix.python-version }}
        path: reports/pylint_report.txt

  docker-build:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t solsat-api:dev .

    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 8000:8000 --env ENV=development solsat-api:dev
        sleep 10
        curl -f http://localhost:8000/api/v1/health || exit 1
        docker rm -f test-container

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json
